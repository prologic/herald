// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: herald_services.proto

package services

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// UploadRequest
type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val1 string `protobuf:"bytes,1,opt,name=val1,proto3" json:"val1,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_herald_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_herald_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_herald_services_proto_rawDescGZIP(), []int{0}
}

func (x *UploadRequest) GetVal1() string {
	if x != nil {
		return x.Val1
	}
	return ""
}

// UploadResponse
type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val2 string `protobuf:"bytes,1,opt,name=val2,proto3" json:"val2,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_herald_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_herald_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_herald_services_proto_rawDescGZIP(), []int{1}
}

func (x *UploadResponse) GetVal2() string {
	if x != nil {
		return x.Val2
	}
	return ""
}

// MinionPipelineRequest
type MinionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline string `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Param1   string `protobuf:"bytes,2,opt,name=param1,proto3" json:"param1,omitempty"`
}

func (x *MinionPipelineRequest) Reset() {
	*x = MinionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_herald_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionPipelineRequest) ProtoMessage() {}

func (x *MinionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_herald_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionPipelineRequest.ProtoReflect.Descriptor instead.
func (*MinionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_herald_services_proto_rawDescGZIP(), []int{2}
}

func (x *MinionPipelineRequest) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *MinionPipelineRequest) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

// MinionPipelineResponse
type MinionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *MinionPipelineResponse) Reset() {
	*x = MinionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_herald_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionPipelineResponse) ProtoMessage() {}

func (x *MinionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_herald_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionPipelineResponse.ProtoReflect.Descriptor instead.
func (*MinionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_herald_services_proto_rawDescGZIP(), []int{3}
}

func (x *MinionPipelineResponse) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

var File_herald_services_proto protoreflect.FileDescriptor

var file_herald_services_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x23, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x61, 0x6c, 0x31, 0x22, 0x24, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x32,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x32, 0x22, 0x4b, 0x0a, 0x15,
	0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x32, 0xaa, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_herald_services_proto_rawDescOnce sync.Once
	file_herald_services_proto_rawDescData = file_herald_services_proto_rawDesc
)

func file_herald_services_proto_rawDescGZIP() []byte {
	file_herald_services_proto_rawDescOnce.Do(func() {
		file_herald_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_herald_services_proto_rawDescData)
	})
	return file_herald_services_proto_rawDescData
}

var file_herald_services_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_herald_services_proto_goTypes = []interface{}{
	(*UploadRequest)(nil),          // 0: services.UploadRequest
	(*UploadResponse)(nil),         // 1: services.UploadResponse
	(*MinionPipelineRequest)(nil),  // 2: services.MinionPipelineRequest
	(*MinionPipelineResponse)(nil), // 3: services.MinionPipelineResponse
}
var file_herald_services_proto_depIdxs = []int32{
	0, // 0: services.Herald.SubmitUpload:input_type -> services.UploadRequest
	2, // 1: services.Herald.SubmitMinionPipeline:input_type -> services.MinionPipelineRequest
	1, // 2: services.Herald.SubmitUpload:output_type -> services.UploadResponse
	3, // 3: services.Herald.SubmitMinionPipeline:output_type -> services.MinionPipelineResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_herald_services_proto_init() }
func file_herald_services_proto_init() {
	if File_herald_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_herald_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_herald_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_herald_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_herald_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_herald_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_herald_services_proto_goTypes,
		DependencyIndexes: file_herald_services_proto_depIdxs,
		MessageInfos:      file_herald_services_proto_msgTypes,
	}.Build()
	File_herald_services_proto = out.File
	file_herald_services_proto_rawDesc = nil
	file_herald_services_proto_goTypes = nil
	file_herald_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HeraldClient is the client API for Herald service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeraldClient interface {
	// SubmitUpload is an exposed function for the Upload service
	SubmitUpload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	// SubmitMinionPipeline will submit a minion pipeline request to CLIMB
	SubmitMinionPipeline(ctx context.Context, in *MinionPipelineRequest, opts ...grpc.CallOption) (*MinionPipelineResponse, error)
}

type heraldClient struct {
	cc grpc.ClientConnInterface
}

func NewHeraldClient(cc grpc.ClientConnInterface) HeraldClient {
	return &heraldClient{cc}
}

func (c *heraldClient) SubmitUpload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/services.Herald/SubmitUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heraldClient) SubmitMinionPipeline(ctx context.Context, in *MinionPipelineRequest, opts ...grpc.CallOption) (*MinionPipelineResponse, error) {
	out := new(MinionPipelineResponse)
	err := c.cc.Invoke(ctx, "/services.Herald/SubmitMinionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeraldServer is the server API for Herald service.
type HeraldServer interface {
	// SubmitUpload is an exposed function for the Upload service
	SubmitUpload(context.Context, *UploadRequest) (*UploadResponse, error)
	// SubmitMinionPipeline will submit a minion pipeline request to CLIMB
	SubmitMinionPipeline(context.Context, *MinionPipelineRequest) (*MinionPipelineResponse, error)
}

// UnimplementedHeraldServer can be embedded to have forward compatible implementations.
type UnimplementedHeraldServer struct {
}

func (*UnimplementedHeraldServer) SubmitUpload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUpload not implemented")
}
func (*UnimplementedHeraldServer) SubmitMinionPipeline(context.Context, *MinionPipelineRequest) (*MinionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMinionPipeline not implemented")
}

func RegisterHeraldServer(s *grpc.Server, srv HeraldServer) {
	s.RegisterService(&_Herald_serviceDesc, srv)
}

func _Herald_SubmitUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeraldServer).SubmitUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Herald/SubmitUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeraldServer).SubmitUpload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Herald_SubmitMinionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeraldServer).SubmitMinionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Herald/SubmitMinionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeraldServer).SubmitMinionPipeline(ctx, req.(*MinionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Herald_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Herald",
	HandlerType: (*HeraldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitUpload",
			Handler:    _Herald_SubmitUpload_Handler,
		},
		{
			MethodName: "SubmitMinionPipeline",
			Handler:    _Herald_SubmitMinionPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "herald_services.proto",
}
