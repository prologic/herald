// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service_sequence.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
type ProcessSubmission struct {
	Val1                 string   `protobuf:"bytes,1,opt,name=val1,proto3" json:"val1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessSubmission) Reset()         { *m = ProcessSubmission{} }
func (m *ProcessSubmission) String() string { return proto.CompactTextString(m) }
func (*ProcessSubmission) ProtoMessage()    {}
func (*ProcessSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7e98e7b4b419a2, []int{0}
}

func (m *ProcessSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessSubmission.Unmarshal(m, b)
}
func (m *ProcessSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessSubmission.Marshal(b, m, deterministic)
}
func (m *ProcessSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSubmission.Merge(m, src)
}
func (m *ProcessSubmission) XXX_Size() int {
	return xxx_messageInfo_ProcessSubmission.Size(m)
}
func (m *ProcessSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSubmission proto.InternalMessageInfo

func (m *ProcessSubmission) GetVal1() string {
	if m != nil {
		return m.Val1
	}
	return ""
}

//
type ProcessSummary struct {
	Val2                 string   `protobuf:"bytes,1,opt,name=val2,proto3" json:"val2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessSummary) Reset()         { *m = ProcessSummary{} }
func (m *ProcessSummary) String() string { return proto.CompactTextString(m) }
func (*ProcessSummary) ProtoMessage()    {}
func (*ProcessSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7e98e7b4b419a2, []int{1}
}

func (m *ProcessSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessSummary.Unmarshal(m, b)
}
func (m *ProcessSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessSummary.Marshal(b, m, deterministic)
}
func (m *ProcessSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSummary.Merge(m, src)
}
func (m *ProcessSummary) XXX_Size() int {
	return xxx_messageInfo_ProcessSummary.Size(m)
}
func (m *ProcessSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSummary proto.InternalMessageInfo

func (m *ProcessSummary) GetVal2() string {
	if m != nil {
		return m.Val2
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessSubmission)(nil), "services.ProcessSubmission")
	proto.RegisterType((*ProcessSummary)(nil), "services.ProcessSummary")
}

func init() { proto.RegisterFile("service_sequence.proto", fileDescriptor_8e7e98e7b4b419a2) }

var fileDescriptor_8e7e98e7b4b419a2 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x8d, 0x2f, 0x4e, 0x2d, 0x2c, 0x4d, 0xcd, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x8a, 0x17, 0x2b, 0xa9, 0x73, 0x09, 0x06, 0x14, 0xe5, 0x27, 0xa7,
	0x16, 0x17, 0x07, 0x97, 0x26, 0xe5, 0x66, 0x16, 0x17, 0x67, 0xe6, 0xe7, 0x09, 0x09, 0x71, 0xb1,
	0x94, 0x25, 0xe6, 0x18, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x2a, 0x5c,
	0x7c, 0x70, 0x85, 0xb9, 0xb9, 0x89, 0x45, 0x95, 0x50, 0x55, 0x46, 0x48, 0xaa, 0x8c, 0x8c, 0x42,
	0xb8, 0x38, 0x82, 0xa1, 0x56, 0x09, 0x79, 0x70, 0xf1, 0x06, 0x95, 0xe6, 0x41, 0xb9, 0x99, 0x79,
	0xe9, 0x42, 0xd2, 0x7a, 0x30, 0x6b, 0xf5, 0x30, 0xec, 0x94, 0x92, 0xc0, 0x22, 0x09, 0xb6, 0x47,
	0x89, 0x21, 0x89, 0x0d, 0xec, 0x6a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x66, 0xdb,
	0x35, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceClient is the client API for Sequence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceClient interface {
	// Run is an exposed function for the Sequence service
	RunSequencing(ctx context.Context, in *ProcessSubmission, opts ...grpc.CallOption) (*ProcessSummary, error)
}

type sequenceClient struct {
	cc *grpc.ClientConn
}

func NewSequenceClient(cc *grpc.ClientConn) SequenceClient {
	return &sequenceClient{cc}
}

func (c *sequenceClient) RunSequencing(ctx context.Context, in *ProcessSubmission, opts ...grpc.CallOption) (*ProcessSummary, error) {
	out := new(ProcessSummary)
	err := c.cc.Invoke(ctx, "/services.Sequence/RunSequencing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServer is the server API for Sequence service.
type SequenceServer interface {
	// Run is an exposed function for the Sequence service
	RunSequencing(context.Context, *ProcessSubmission) (*ProcessSummary, error)
}

// UnimplementedSequenceServer can be embedded to have forward compatible implementations.
type UnimplementedSequenceServer struct {
}

func (*UnimplementedSequenceServer) RunSequencing(ctx context.Context, req *ProcessSubmission) (*ProcessSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSequencing not implemented")
}

func RegisterSequenceServer(s *grpc.Server, srv SequenceServer) {
	s.RegisterService(&_Sequence_serviceDesc, srv)
}

func _Sequence_RunSequencing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).RunSequencing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Sequence/RunSequencing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).RunSequencing(ctx, req.(*ProcessSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sequence_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Sequence",
	HandlerType: (*SequenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunSequencing",
			Handler:    _Sequence_RunSequencing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_sequence.proto",
}
