// Code generated by protoc-gen-go. DO NOT EDIT.
// source: herald.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
//Status is used to determine if experiments/samples have tagged processes, or if they have been announced via the message server
type Status int32

const (
	Status_UN_INITIALIZED Status = 0
	Status_untagged       Status = 1
	Status_tagged         Status = 2
	Status_announced      Status = 3
)

var Status_name = map[int32]string{
	0: "UN_INITIALIZED",
	1: "untagged",
	2: "tagged",
	3: "announced",
}

var Status_value = map[string]int32{
	"UN_INITIALIZED": 0,
	"untagged":       1,
	"tagged":         2,
	"announced":      3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0fa959798cfd2bf0, []int{0}
}

//
//Comments are used to record a message history
type Comment struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Text                 string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa959798cfd2bf0, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

//
//HeraldData is the base type, used by both Experiment and Sample
type HeraldData struct {
	Created              *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Label                string               `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	History              []*Comment           `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
	Status               Status               `protobuf:"varint,4,opt,name=status,proto3,enum=services.Status" json:"status,omitempty"`
	Tags                 map[string]bool      `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RequestOrder         []string             `protobuf:"bytes,6,rep,name=requestOrder,proto3" json:"requestOrder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HeraldData) Reset()         { *m = HeraldData{} }
func (m *HeraldData) String() string { return proto.CompactTextString(m) }
func (*HeraldData) ProtoMessage()    {}
func (*HeraldData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa959798cfd2bf0, []int{1}
}

func (m *HeraldData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeraldData.Unmarshal(m, b)
}
func (m *HeraldData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeraldData.Marshal(b, m, deterministic)
}
func (m *HeraldData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeraldData.Merge(m, src)
}
func (m *HeraldData) XXX_Size() int {
	return xxx_messageInfo_HeraldData.Size(m)
}
func (m *HeraldData) XXX_DiscardUnknown() {
	xxx_messageInfo_HeraldData.DiscardUnknown(m)
}

var xxx_messageInfo_HeraldData proto.InternalMessageInfo

func (m *HeraldData) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *HeraldData) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *HeraldData) GetHistory() []*Comment {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *HeraldData) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UN_INITIALIZED
}

func (m *HeraldData) GetTags() map[string]bool {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HeraldData) GetRequestOrder() []string {
	if m != nil {
		return m.RequestOrder
	}
	return nil
}

//
//Experiment is used to describe a Nanopore sequencing run
type Experiment struct {
	Metadata             *HeraldData `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	OutputDirectory      string      `protobuf:"bytes,2,opt,name=outputDirectory,proto3" json:"outputDirectory,omitempty"`
	Fast5OutputDirectory string      `protobuf:"bytes,3,opt,name=fast5OutputDirectory,proto3" json:"fast5OutputDirectory,omitempty"`
	FastqOutputDirectory string      `protobuf:"bytes,4,opt,name=fastqOutputDirectory,proto3" json:"fastqOutputDirectory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa959798cfd2bf0, []int{2}
}

func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Experiment.Unmarshal(m, b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
}
func (m *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(m, src)
}
func (m *Experiment) XXX_Size() int {
	return xxx_messageInfo_Experiment.Size(m)
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetMetadata() *HeraldData {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Experiment) GetOutputDirectory() string {
	if m != nil {
		return m.OutputDirectory
	}
	return ""
}

func (m *Experiment) GetFast5OutputDirectory() string {
	if m != nil {
		return m.Fast5OutputDirectory
	}
	return ""
}

func (m *Experiment) GetFastqOutputDirectory() string {
	if m != nil {
		return m.FastqOutputDirectory
	}
	return ""
}

//
//Sample is used to describe a biological sample which is being sequenced as part of an Experiment
type Sample struct {
	Metadata             *HeraldData `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ParentExperiment     string      `protobuf:"bytes,2,opt,name=parentExperiment,proto3" json:"parentExperiment,omitempty"`
	Barcode              int32       `protobuf:"varint,3,opt,name=barcode,proto3" json:"barcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fa959798cfd2bf0, []int{3}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetMetadata() *HeraldData {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Sample) GetParentExperiment() string {
	if m != nil {
		return m.ParentExperiment
	}
	return ""
}

func (m *Sample) GetBarcode() int32 {
	if m != nil {
		return m.Barcode
	}
	return 0
}

func init() {
	proto.RegisterEnum("services.Status", Status_name, Status_value)
	proto.RegisterType((*Comment)(nil), "services.Comment")
	proto.RegisterType((*HeraldData)(nil), "services.HeraldData")
	proto.RegisterMapType((map[string]bool)(nil), "services.HeraldData.TagsEntry")
	proto.RegisterType((*Experiment)(nil), "services.Experiment")
	proto.RegisterType((*Sample)(nil), "services.Sample")
}

func init() { proto.RegisterFile("herald.proto", fileDescriptor_0fa959798cfd2bf0) }

var fileDescriptor_0fa959798cfd2bf0 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x71, 0x9c, 0x38, 0xf1, 0x6d, 0x28, 0x66, 0x94, 0x85, 0x95, 0x05, 0x44, 0x5e, 0x59,
	0x45, 0x72, 0x91, 0x01, 0x51, 0xb1, 0x43, 0x24, 0x12, 0x91, 0x50, 0x2b, 0x4d, 0x83, 0x90, 0xd8,
	0xa0, 0x89, 0x7d, 0xeb, 0x5a, 0xf8, 0xaf, 0x33, 0xd7, 0x55, 0xb3, 0xe3, 0xd1, 0x78, 0x04, 0x1e,
	0x09, 0x75, 0x6c, 0xc7, 0x22, 0x74, 0x81, 0xd8, 0xdd, 0x9f, 0xef, 0x5c, 0xf9, 0x9c, 0x31, 0x4c,
	0xaf, 0x51, 0x8a, 0x2c, 0x0e, 0x2a, 0x59, 0x52, 0xc9, 0x26, 0x0a, 0xe5, 0x6d, 0x1a, 0xa1, 0x9a,
	0x3f, 0x4f, 0xca, 0x32, 0xc9, 0xf0, 0x54, 0xcf, 0xb7, 0xf5, 0xd5, 0x29, 0xa5, 0x39, 0x2a, 0x12,
	0x79, 0xd5, 0xa0, 0xde, 0x17, 0x18, 0x7f, 0x28, 0xf3, 0x1c, 0x0b, 0x62, 0x67, 0x60, 0xef, 0xb7,
	0xae, 0xb1, 0x30, 0xfc, 0xa3, 0x70, 0x1e, 0x34, 0xfa, 0xa0, 0xd3, 0x07, 0x9b, 0x8e, 0xe0, 0x3d,
	0xcc, 0x18, 0x0c, 0x09, 0xef, 0xc8, 0x1d, 0x2c, 0x0c, 0xdf, 0xe6, 0xba, 0xf6, 0x7e, 0x0e, 0x00,
	0x3e, 0xea, 0x8f, 0x5a, 0x0a, 0x12, 0xec, 0x35, 0x8c, 0x23, 0x89, 0x82, 0x30, 0xfe, 0x87, 0xd3,
	0x1d, 0xca, 0x66, 0x30, 0xca, 0xc4, 0x16, 0xb3, 0xf6, 0x72, 0xd3, 0xb0, 0x17, 0x30, 0xbe, 0x4e,
	0x15, 0x95, 0x72, 0xe7, 0x9a, 0x0b, 0xd3, 0x3f, 0x0a, 0x9f, 0x06, 0x9d, 0xe1, 0xa0, 0x35, 0xc3,
	0x3b, 0x82, 0xf9, 0x60, 0x29, 0x12, 0x54, 0x2b, 0x77, 0xb8, 0x30, 0xfc, 0xe3, 0xd0, 0xe9, 0xd9,
	0x4b, 0x3d, 0xe7, 0xed, 0x9e, 0x85, 0x30, 0x24, 0x91, 0x28, 0x77, 0xa4, 0x6f, 0x3e, 0xeb, 0xb9,
	0xde, 0x46, 0xb0, 0x11, 0x89, 0x5a, 0x15, 0x24, 0x77, 0x5c, 0xb3, 0xcc, 0x83, 0xa9, 0xc4, 0x9b,
	0x1a, 0x15, 0x5d, 0xc8, 0x18, 0xa5, 0x6b, 0x2d, 0x4c, 0xdf, 0xe6, 0x7f, 0xcc, 0xe6, 0x6f, 0xc1,
	0xde, 0xcb, 0x98, 0x03, 0xe6, 0x77, 0xdc, 0xe9, 0x0c, 0x6c, 0x7e, 0x5f, 0xde, 0x7b, 0xbc, 0x15,
	0x59, 0x8d, 0xda, 0xe3, 0x84, 0x37, 0xcd, 0xbb, 0xc1, 0x99, 0xe1, 0xfd, 0x32, 0x00, 0x56, 0x77,
	0x15, 0xca, 0x54, 0xbf, 0xcf, 0x4b, 0x98, 0xe4, 0x48, 0x22, 0x16, 0x24, 0xda, 0x0c, 0x67, 0x0f,
	0x7d, 0x23, 0xdf, 0x53, 0xcc, 0x87, 0x27, 0x65, 0x4d, 0x55, 0x4d, 0xcb, 0x54, 0x62, 0xa4, 0x03,
	0x6b, 0x82, 0x3c, 0x1c, 0xb3, 0x10, 0x66, 0x57, 0x42, 0xd1, 0x9b, 0x8b, 0x03, 0xdc, 0xd4, 0xf8,
	0x83, 0xbb, 0x4e, 0x73, 0x73, 0xa8, 0x19, 0xf6, 0x9a, 0xc3, 0x9d, 0xf7, 0xc3, 0x00, 0xeb, 0x52,
	0xe4, 0x55, 0x86, 0xff, 0x61, 0xe7, 0x04, 0x9c, 0x4a, 0x48, 0x2c, 0xa8, 0x0f, 0xa5, 0xf5, 0xf3,
	0xd7, 0x9c, 0xb9, 0x30, 0xde, 0x0a, 0x19, 0x95, 0x31, 0x6a, 0x0f, 0x23, 0xde, 0xb5, 0x27, 0x2b,
	0xb0, 0x9a, 0x87, 0x67, 0x0c, 0x8e, 0x3f, 0x9f, 0x7f, 0x5b, 0x9f, 0xaf, 0x37, 0xeb, 0xf7, 0x9f,
	0xd6, 0x5f, 0x57, 0x4b, 0xe7, 0x11, 0x9b, 0xc2, 0xa4, 0x2e, 0x48, 0x24, 0x09, 0xc6, 0x8e, 0xc1,
	0x00, 0xac, 0xb6, 0x1e, 0xb0, 0xc7, 0x60, 0x8b, 0xa2, 0x28, 0xeb, 0x22, 0xc2, 0xd8, 0x31, 0xb7,
	0x96, 0xfe, 0x6f, 0x5f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x80, 0x9e, 0x7f, 0x7a, 0x03,
	0x00, 0x00,
}
