// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

package sample

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
//Sample is used describe the start point of a sequencing experiment
type Sample struct {
	Created              *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Label                string               `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Barcode              int32                `protobuf:"varint,3,opt,name=barcode,proto3" json:"barcode,omitempty"`
	History              []*Sample_Comment    `protobuf:"bytes,4,rep,name=history,proto3" json:"history,omitempty"`
	Tags                 *Sample_Tags         `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Sample) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Sample) GetBarcode() int32 {
	if m != nil {
		return m.Barcode
	}
	return 0
}

func (m *Sample) GetHistory() []*Sample_Comment {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Sample) GetTags() *Sample_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

//
//Comments are used by Herald to record a samples history
type Sample_Comment struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Text                 string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sample_Comment) Reset()         { *m = Sample_Comment{} }
func (m *Sample_Comment) String() string { return proto.CompactTextString(m) }
func (*Sample_Comment) ProtoMessage()    {}
func (*Sample_Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0, 0}
}

func (m *Sample_Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample_Comment.Unmarshal(m, b)
}
func (m *Sample_Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample_Comment.Marshal(b, m, deterministic)
}
func (m *Sample_Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample_Comment.Merge(m, src)
}
func (m *Sample_Comment) XXX_Size() int {
	return xxx_messageInfo_Sample_Comment.Size(m)
}
func (m *Sample_Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Sample_Comment proto.InternalMessageInfo

func (m *Sample_Comment) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Sample_Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

//
//Tags are used to indicate what processes to run on a sample
type Sample_Tags struct {
	Sequence             bool     `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample_Tags) Reset()         { *m = Sample_Tags{} }
func (m *Sample_Tags) String() string { return proto.CompactTextString(m) }
func (*Sample_Tags) ProtoMessage()    {}
func (*Sample_Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0, 1}
}

func (m *Sample_Tags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample_Tags.Unmarshal(m, b)
}
func (m *Sample_Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample_Tags.Marshal(b, m, deterministic)
}
func (m *Sample_Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample_Tags.Merge(m, src)
}
func (m *Sample_Tags) XXX_Size() int {
	return xxx_messageInfo_Sample_Tags.Size(m)
}
func (m *Sample_Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Sample_Tags proto.InternalMessageInfo

func (m *Sample_Tags) GetSequence() bool {
	if m != nil {
		return m.Sequence
	}
	return false
}

func init() {
	proto.RegisterType((*Sample)(nil), "sample.Sample")
	proto.RegisterType((*Sample_Comment)(nil), "sample.Sample.Comment")
	proto.RegisterType((*Sample_Tags)(nil), "sample.Sample.Tags")
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor_2141552de9bf11d0) }

var fileDescriptor_2141552de9bf11d0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xcd, 0x4e, 0xc3, 0x30,
	0x10, 0x84, 0x95, 0x36, 0x3f, 0xed, 0x96, 0xd3, 0x82, 0x90, 0x95, 0x0b, 0x51, 0x2f, 0xe4, 0xe4,
	0xa2, 0xc2, 0x81, 0x3b, 0x6f, 0x60, 0x2a, 0x71, 0x76, 0xd2, 0x25, 0x54, 0x8a, 0xeb, 0x10, 0x6f,
	0x25, 0x78, 0x41, 0x9e, 0x0b, 0x61, 0xc7, 0x45, 0xe2, 0xc4, 0xcd, 0x63, 0x7d, 0x33, 0x3b, 0x03,
	0x17, 0x4e, 0x9b, 0xa1, 0x27, 0x39, 0x8c, 0x96, 0x2d, 0xe6, 0x41, 0x95, 0x37, 0x9d, 0xb5, 0x5d,
	0x4f, 0x1b, 0xff, 0xdb, 0x9c, 0x5e, 0x37, 0x7c, 0x30, 0xe4, 0x58, 0x9b, 0x21, 0x80, 0xeb, 0xaf,
	0x19, 0xe4, 0xcf, 0x9e, 0xc5, 0x07, 0x28, 0xda, 0x91, 0x34, 0xd3, 0x5e, 0x24, 0x55, 0x52, 0xaf,
	0xb6, 0xa5, 0x0c, 0x6e, 0x19, 0xdd, 0x72, 0x17, 0xdd, 0x2a, 0xa2, 0x78, 0x05, 0x59, 0xaf, 0x1b,
	0xea, 0xc5, 0xac, 0x4a, 0xea, 0xa5, 0x0a, 0x02, 0x05, 0x14, 0x8d, 0x1e, 0x5b, 0xbb, 0x27, 0x31,
	0xaf, 0x92, 0x3a, 0x53, 0x51, 0xe2, 0x1d, 0x14, 0x6f, 0x07, 0xc7, 0x76, 0xfc, 0x14, 0x69, 0x35,
	0xaf, 0x57, 0xdb, 0x6b, 0x39, 0x35, 0x0f, 0x35, 0xe4, 0x93, 0x35, 0x86, 0x8e, 0xac, 0x22, 0x86,
	0xb7, 0x90, 0xb2, 0xee, 0x9c, 0xc8, 0x7c, 0xa9, 0xcb, 0x3f, 0xf8, 0x4e, 0x77, 0x4e, 0x79, 0xa0,
	0x7c, 0x81, 0x62, 0x32, 0xe3, 0x23, 0x2c, 0xcf, 0x4b, 0xff, 0xb1, 0xe6, 0x17, 0x46, 0x84, 0x94,
	0xe9, 0x83, 0xa7, 0x39, 0xfe, 0x5d, 0xae, 0x21, 0xfd, 0x39, 0x83, 0x25, 0x2c, 0x1c, 0xbd, 0x9f,
	0xe8, 0xd8, 0x92, 0x0f, 0x5d, 0xa8, 0xb3, 0x6e, 0x72, 0x1f, 0x7b, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x09, 0xd3, 0xa8, 0x88, 0x01, 0x00, 0x00,
}
