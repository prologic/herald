syntax = "proto3";
package services;

import "google/protobuf/timestamp.proto";

option go_package = ".;services";

/*
    Comments are used to record generic
    text entries and to track the history
    of HeraldData.
*/
message Comment {
    google.protobuf.Timestamp timestamp = 1;
    string text = 2;
}

/*
    Status is used to determine if runs/samples have 
    tagged service requests and if they have been 
    announced via the message server.
*/
enum Status {
    UN_INITIALIZED = 0;
    untagged = 1;                               // data is not tagged with any service requests (either completed or incomplete)
    tagsIncomplete = 2;                         // data is tagged with service requests, one or more of which are marked incomplete
    tagsComplete = 3;                           // data is tagged with service requests, all of which are marked complete
    announced = 4;                              // tagged service requests have been announced and we are waiting for completion notification
}

/*
    User is used to identify the owner of HeraldData.
*/
message User {
    google.protobuf.Timestamp created = 1;
    string name = 2;
    string email = 3;
}

/*
    Config is used to describe a Herald instance.
*/
message Config {
    google.protobuf.Timestamp created = 1;
    string filepath = 2;                        // filepath to config
    string fileformat = 3;                      // the fileformat of the config on disk
    string version = 4;                         // version of Herald used   
    User user = 5;                              // user details
}

/*
    HeraldData is the base data type.
    It is used by both Run and Sample.
*/
message HeraldData {
    google.protobuf.Timestamp created = 1;
    string label = 3;                            // the run or sample name
    repeated Comment history = 4;                // describes the history of the run
    Status status = 5;                           // describes if untagged, tagged with complete/incomplete services and if announced
    map<string, bool> tags = 6;                  // tagged services and their complete status (true=complete, false=incomplete)
    repeated string requestOrder = 7;            // the order to send requests to the tagged services
}

/*
    Run is used to describe a Nanopore
    sequencing run.
*/
message Run {
    HeraldData metadata = 1;
    string outputDirectory = 2;                 // where the run is stored
    string fast5OutputDirectory = 3;            // where the run fast5 data is stored
    string fastqOutputDirectory = 4;            // where the run fastq data is stored
}

/*
    Sample is used to describe a biological
    sample which is being sequenced as part 
    of a Run.
*/
message Sample {
    HeraldData metadata = 1;
    string parentRun = 2;                       // the label of the parent run, used to perform lookups
    int32 barcode = 3;
}
